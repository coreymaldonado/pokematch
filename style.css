@layer base {
  @font-face {
    font-family: pokemon;
    src: url(/PokeSolid.ttf);
  }
}

.container {
  user-select: none;
  font-family: pokemon;
  letter-spacing: 5px;
  margin: 0 auto;
  max-width: 800px;
  padding: 20px;
  display: flex;
  flex-direction: column;
  align-items: center;
}

.columnOne {
  display: flex;
  flex-direction: row;
  padding-right: 10px;
  /* display: none; */
}

.columnTwo {
}

.label {
  font-family: Arial, Helvetica, sans-serif;
  letter-spacing: 5px;
  margin: 0 auto 0 0;
  max-width: 800px;
  padding-top: 5px;
  padding-bottom: 5px;
  display: flex;
  flex-direction: row-reverse;
}

header {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: space-between;
  width: 100%;
}

#game {
  display: grid;
  grid-template-columns: repeat(4, 90px);
  grid-template-rows: repeat(4, 90px);
  grid-gap: 1px;
}

.card {
  box-shadow: 0 3px 10px rgba(200, 200, 200, 0.9);
  border-radius: 10px;
  position: relative;
  overflow: hidden;
  transform-style: preserve-3d;
  width: 90px;
  height: 90px;
}

.front,
.back {
  font-family: Arial, Helvetica, sans-serif;
  font-size: 12px;
  height: 100%;
  width: 100%;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  position: absolute;
  backface-visibility: hidden;
  transition: transform 0.5s;
}

.front {
  background-image: url("/pokeball.png");
  background-position: center;
  background-repeat: no-repeat;
  background-color: black;
}

.rotated {
  transform: rotateY(180deg);
}

.flex {
  display: flex;
}

.poketext {
  color: #fdc903;
  font-size: 3em;
  text-shadow: 0 0 10px #3758aa, 0 0 10px #3758aa, 0 0 10px #3758aa,
    0 0 10px #3758aa, 0 0 10px #3758aa, 0 0 10px #3758aa;
  padding: 0px;
  margin: 0px;
}

.alert {
  padding: 20px;
  margin-bottom: 10px;
  background-color: #2eb886;
  color: white;
  font-family: Arial, Helvetica, sans-serif;
  letter-spacing: normal;
  position: absolute;
  left: 50%;
  top: 50%;
  margin-left: -179px;
  z-index: 2;
  border-radius: 10px;
}

.hidden {
  display: none;
}

@media (width <= 1250px) {
  .columnTwo {
    /* Grid size 90px? */
  }
}

@media (width >= 1250px) {
  .columnTwo {
    /* Grid size 120px? */
  }
}

/* Dropdown */
body {
  text-align: center;
  font: 16px/1.5 sans-serif;
  padding-top: 40px;
  background-color: #eceff1;
}

.dropdown {
  position: relative;
  display: inline-block;
  font-size: 16px;
  color: #fff;
}

/**
  Hide the checkbox itself. Checking and unchecking 
  it we will be done via the label element.
*/

input[type="checkbox"] {
  display: none;
}

/* Click to expand button */

label {
  box-sizing: border-box;
  display: inline-block;
  width: 100%;
  background-color: #57a0d4;
  padding: 15px 20px;

  cursor: pointer;
  text-align: center;
  box-shadow: 0 1px 1px rgba(0, 0, 0, 0.2);

  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}

/*  The ul will have display:none by default */

ul {
  position: absolute;
  list-style: none;
  text-align: left;
  width: 100%;
  z-index: 1;
  margin: 0;
  padding: 0;
  box-shadow: 0px 1px 1px rgba(0, 0, 0, 0.2);

  display: none;
}

ul li {
  padding: 15px;
  background-color: #fff;
  color: #4fb9a7;
  margin-bottom: 1px;
  cursor: pointer;
}

ul li:hover {
  background-color: #4fb9a7;
  color: #fff;
}

ul li a {
  color: inherit;
  text-decoration: none;
}

/**

  By using the Following-sibling selector (~),
  we can target elements positioned after our checkbox in the DOM tree.

  With the state pseudo selector (:checked),
  we can make changes depending on the state of the checkbox.

  Using this combination of selectors
  allows to change the color of the label
  and show the list of items
  only when the checkbox is checked.

*/

input[type="checkbox"]:checked ~ label {
  background-color: #3d88bd;
}

input[type="checkbox"]:checked ~ ul {
  display: block;
}
